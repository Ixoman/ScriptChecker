//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/sdqsa/source/repos/SqlScriptChecker/SqlScriptChecker/SQL.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="SQLParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ISQLListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.sql"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSql([NotNull] SQLParser.SqlContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.sql"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSql([NotNull] SQLParser.SqlContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] SQLParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] SQLParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.updateStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUpdateStatement([NotNull] SQLParser.UpdateStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.updateStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUpdateStatement([NotNull] SQLParser.UpdateStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.deleteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeleteStatement([NotNull] SQLParser.DeleteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.deleteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeleteStatement([NotNull] SQLParser.DeleteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSelectStatement([NotNull] SQLParser.SelectStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.selectStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSelectStatement([NotNull] SQLParser.SelectStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTableName([NotNull] SQLParser.TableNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.tableName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTableName([NotNull] SQLParser.TableNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.columnAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnAssignment([NotNull] SQLParser.ColumnAssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.columnAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnAssignment([NotNull] SQLParser.ColumnAssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] SQLParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] SQLParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.joinTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinTable([NotNull] SQLParser.JoinTableContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.joinTable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinTable([NotNull] SQLParser.JoinTableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhereClause([NotNull] SQLParser.WhereClauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.whereClause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhereClause([NotNull] SQLParser.WhereClauseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] SQLParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] SQLParser.ConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonOperator([NotNull] SQLParser.ComparisonOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.comparisonOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonOperator([NotNull] SQLParser.ComparisonOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOperator([NotNull] SQLParser.LogicalOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.logicalOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOperator([NotNull] SQLParser.LogicalOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.columnList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnList([NotNull] SQLParser.ColumnListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.columnList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnList([NotNull] SQLParser.ColumnListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterValue([NotNull] SQLParser.ValueContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.value"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitValue([NotNull] SQLParser.ValueContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] SQLParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] SQLParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.arithmeticOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticOperator([NotNull] SQLParser.ArithmeticOperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.arithmeticOperator"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticOperator([NotNull] SQLParser.ArithmeticOperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="SQLParser.joinType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinType([NotNull] SQLParser.JoinTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="SQLParser.joinType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinType([NotNull] SQLParser.JoinTypeContext context);
}
